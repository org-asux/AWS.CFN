### This is the file 'AWSCFN-fullstack-vpc-Create.ASUX-batch.txt'

### The 1st thing you do - Is to define's the JOB-parameters
### You can do it in 2 ways (or do both ways, as shown in next 3 lines below):-
###	(1) Via a properties-file
###	(2) or via setProperty

//=============================================================
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//=============================================================
### Now load the common stuff - that's common to all jobs

include @${ASUX::AWSCFNHOME}/bin/AWSCFN-CommonHeader-FullStack.ASUX-batch.txt

//=============================================================
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//=============================================================

### Any ___OVERRIDES___ already came in via JobSetName.yaml

//=============================================================
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//=============================================================
### Load the external inputs (in this case, the list of AZs for the region of interest)

aws.sdk --list-AZs      ${ASUX::AWSRegion} --offline
#________ useAsInput @${ASUX::AWSHOME}/AWS-SDK/etc/offline-downloads/AWS.AZlist-${ASUX::AWSRegion}.yaml   ### This code to the LEFT, should be automatically invoked by previous line for --offline
saveTo !AWSAZs

//=============================================================
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//=============================================================
### Now build the CFN script I want

useAsInput @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/TopYaml.yaml
saveTo !YAMLROOT

yaml --insert / @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Parameters-VPC.yaml
yaml --macro @/dev/null
saveTo !YAMLROOT

//--------------------------------------------------

makeNewRoot Conditions
saveTo !Conditions

useAsInput !AWSAZs

	foreach
		useAsInput !Conditions
		yaml --insert Conditions @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Conditions-VPC.yaml
		yaml --macro @/dev/null
		saveTo !Conditions
	end

useAsInput !YAMLROOT
yaml --insert / !Conditions
saveTo !YAMLROOT

//--------------------------------------------------

makeNewRoot Resources
yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/VPC.yaml
yaml --macro @/dev/null
yaml --macro @/dev/null
### !!!!!!!!!!!!!!!!! ATTENTION !!!!!!!!!!!!! This double-back2back macro is NEEDED, else we will have 'cloned' VPC under Resources/ YAML.

yaml --insert Resources,${ASUX::MyVPCName},Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null
saveTo !TopElemResources

//--------------------------------------------------
useAsInput !TopElemResources

### !!!!!!!!!!!!!! ATTENTION !!!!!!!!!!!!!!!!!!
### Internet gateways per Region = 5.  This limit is directly correlated with the limit on 5 VPCs per Region.

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/IGW.yaml
setProperty Tag_Name=IGW-${ASUX::MyVPCStackPrefix}
yaml --insert Resources,MyInternetGateway,Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/IGWAttach.yaml
yaml --macro @/dev/null

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/PublicRouteTable.yaml
setProperty Tag_Name=PublicRT-${ASUX::MyVPCStackPrefix}
yaml --insert Resources,MyPublicRouteTable,Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null
yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/PublicRoute.yaml

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/PrivateRouteTable.yaml
setProperty Tag_Name=PrivateRT-${ASUX::MyVPCStackPrefix}
yaml --insert Resources,MyPrivateRouteTable,Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/ACLDefault.yaml
setProperty Tag_Name=NACL-Public-${ASUX::MyVPCStackPrefix}
yaml --insert Resources,MyDefaultNetworkAcl,Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null

yaml --insert Resources @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/ACLPrivate.yaml
setProperty Tag_Name=NACL-Private-${ASUX::MyVPCStackPrefix}
yaml --insert Resources,MyPrivateNetworkAcl,Properties  @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Tags.yaml     --delimiter ,
yaml --macro @/dev/null

saveTo !TopElemResources

//--------------------------------------------------
#___	useAsInput !TopElemResources
useAsInput "K: V"

setProperty WhichNACLRef=MyDefaultNetworkAcl	### The RHS of the '=' refers to the CFN-Template-Parameter that points to the EXPORT for the NACL - for Public SUBNET
include @${ASUX::AWSCFNHOME}/bin/AWSCFN-NACL-subnet-Public.txt
#___	yaml --macro @/dev/null
#___	yaml --macro @/dev/null		### Attention! Having to run it twice, else the following setProperty is in effect for above 'include' :-(

setProperty WhichNACLRef=MyPrivateNetworkAcl	### The RHS of the '=' refers to the CFN-Template-Parameter that points to the EXPORT for the NACL - for PRIVATE SUBNET
include @${ASUX::AWSCFNHOME}/bin/AWSCFN-NACL-subnet-Private.txt
#___	yaml --macro @/dev/null
#___	yaml --macro @/dev/null		### Attention! Having to run it twice, else the following setProperty is in effect for above 'include' :-(

#___	saveTo !TopElemResources

//--------------------------------------------------

useAsInput !YAMLROOT
yaml --insert / !TopElemResources
saveTo !YAMLROOT

//=============================================================
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//=============================================================
makeNewRoot Outputs
yaml --insert Outputs @${ASUX::AWSCFNHOME}/AWSCFN.templates-pieces/Outputs-VPC.yaml
yaml --macro @/dev/null
saveTo !TopElemOutputs

//--------------------------------------------------
useAsInput !YAMLROOT
yaml --insert / !TopElemOutputs
yaml --macro @/dev/null
saveTo !YAMLROOT

//--------------------------------------------------

#EoF
