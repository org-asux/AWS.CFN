AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WARNING!!!!  WARNING!!!! Note that you are billed for the AWS resources that you use when you create a stack from this template. WARNING!!!!  WARNING!!!!  This YAML file is generated using ASUX.org's Batch-based scripting. The command used was - .. tbd .. See details of ASUX.org project at https://github.com/org-asux/org-ASUX.github.io/wiki These were in-turn based on the AWS CloudFormation Sample Template @ https://s3.amazonaws.com/cloudformation-examples/user-guide/cross-stack/SampleNetworkCrossStack.template VPC_with_PublicIPs_And_DNS - Sample template that creates a VPC with DNS and public IPs enabled.
Parameters:
  MyStackNamePrefix:
    Description: Because of tools from ASUX.org I can set a default!  Typically it's something like "${MyOrgName}-${MyEnvironment}-${AWSLocation}"
    Type: String
    Default: org-ASUX-Playground-tokyo
  EC2getsPublicIPByDefault:
    Description: Whether any EC2 instance created within this VPC automatically gets a PUBLIC-IP (accessible via internet)
    Type: String
    Default: 'true'
Conditions:
  doesExistSubnet1: !Equals
  - ASUXorgWorks
  - ASUXorgWorks
  doesExistSubnet2: !Equals
  - ASUXorgWorks
  - ASUXorgWorks
  doesExistSubnet3: !Equals
  - ASUXorgWorks
  - ASUXorgWorks
Resources:
  VPCbyASUX:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: APPLNAME
        Value: NOTRELEVANT_FOR_VPC
      - Key: LOCATION
        Value: !Ref 'AWS::Region'
      - Key: CHRGCODE
        Value: org.ASUX
      - Key: ITOWNER
        Value: Sarma
      - Key: BIZOWNER
        Value: Sarma
      - Key: ARCHLAYER
        Value: Network
      - Key: ENV
        Value: Playground
      - Key: SNAPSHOTS
        Value: 'No'
      - Key: USERBASE
        Value: admins
      - Key: DISTRLIST
        Value: tosarma@gmail.com
      - Key: SVCGRP
        Value: org.ASUX
      - Key: VALIDATED
        Value: 'No'
  MyPublicSubnetAZ1:
    Description: >-
      If you specify a true or false value for the property AssignIpv6AddressOnCreation (whose default value = false), then Ipv6CidrBlock property must be specified. - - - Also, Cannot provide Tag with Key=Name.
    Type: 'AWS::EC2::Subnet'
    Condition: doesExistSubnet1
    Properties:
      VpcId: !Ref 'VPCbyASUX'
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: !Ref 'EC2getsPublicIPByDefault'
      AvailabilityZone: ap-northeast-1a
      Tags:
      - Key: APPLNAME
        Value: NOTRELEVANT_FOR_VPC
      - Key: LOCATION
        Value: !Ref 'AWS::Region'
      - Key: CHRGCODE
        Value: org.ASUX
      - Key: ITOWNER
        Value: Sarma
      - Key: BIZOWNER
        Value: Sarma
      - Key: ARCHLAYER
        Value: Network
      - Key: ENV
        Value: Playground
      - Key: SNAPSHOTS
        Value: 'No'
      - Key: USERBASE
        Value: admins
      - Key: DISTRLIST
        Value: tosarma@gmail.com
      - Key: SVCGRP
        Value: org.ASUX
      - Key: VALIDATED
        Value: 'No'
  MyPublicSubnetAZ2:
    Description: >-
      If you specify a true or false value for the property AssignIpv6AddressOnCreation (whose default value = false), then Ipv6CidrBlock property must be specified. - - - Also, Cannot provide Tag with Key=Name.
    Type: 'AWS::EC2::Subnet'
    Condition: doesExistSubnet2
    Properties:
      VpcId: !Ref 'VPCbyASUX'
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: !Ref 'EC2getsPublicIPByDefault'
      AvailabilityZone: ap-northeast-1c
      Tags:
      - Key: APPLNAME
        Value: NOTRELEVANT_FOR_VPC
      - Key: LOCATION
        Value: !Ref 'AWS::Region'
      - Key: CHRGCODE
        Value: org.ASUX
      - Key: ITOWNER
        Value: Sarma
      - Key: BIZOWNER
        Value: Sarma
      - Key: ARCHLAYER
        Value: Network
      - Key: ENV
        Value: Playground
      - Key: SNAPSHOTS
        Value: 'No'
      - Key: USERBASE
        Value: admins
      - Key: DISTRLIST
        Value: tosarma@gmail.com
      - Key: SVCGRP
        Value: org.ASUX
      - Key: VALIDATED
        Value: 'No'
  MyPublicSubnetAZ3:
    Description: >-
      If you specify a true or false value for the property AssignIpv6AddressOnCreation (whose default value = false), then Ipv6CidrBlock property must be specified. - - - Also, Cannot provide Tag with Key=Name.
    Type: 'AWS::EC2::Subnet'
    Condition: doesExistSubnet3
    Properties:
      VpcId: !Ref 'VPCbyASUX'
      CidrBlock: 172.31.32.0/20
      MapPublicIpOnLaunch: !Ref 'EC2getsPublicIPByDefault'
      AvailabilityZone: ap-northeast-1d
      Tags:
      - Key: APPLNAME
        Value: NOTRELEVANT_FOR_VPC
      - Key: LOCATION
        Value: !Ref 'AWS::Region'
      - Key: CHRGCODE
        Value: org.ASUX
      - Key: ITOWNER
        Value: Sarma
      - Key: BIZOWNER
        Value: Sarma
      - Key: ARCHLAYER
        Value: Network
      - Key: ENV
        Value: Playground
      - Key: SNAPSHOTS
        Value: 'No'
      - Key: USERBASE
        Value: admins
      - Key: DISTRLIST
        Value: tosarma@gmail.com
      - Key: SVCGRP
        Value: org.ASUX
      - Key: VALIDATED
        Value: 'No'
  MyInternetGateway:
    Description: >-
      REMEMBER: an IGW is associated with entire VPC.  Only NATs are associated with a single public-subnet.
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: APPLNAME
        Value: NOTRELEVANT_FOR_VPC
      - Key: LOCATION
        Value: !Ref 'AWS::Region'
      - Key: CHRGCODE
        Value: org.ASUX
      - Key: ITOWNER
        Value: Sarma
      - Key: BIZOWNER
        Value: Sarma
      - Key: ARCHLAYER
        Value: Network
      - Key: ENV
        Value: Playground
      - Key: SNAPSHOTS
        Value: 'No'
      - Key: USERBASE
        Value: admins
      - Key: DISTRLIST
        Value: tosarma@gmail.com
      - Key: SVCGRP
        Value: org.ASUX
      - Key: VALIDATED
        Value: 'No'
    DependsOn:
    - MyPublicSubnetAZ1
    - MyPublicSubnetAZ2
    - MyPublicSubnetAZ3
  MyVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
    - MyInternetGateway
    Properties:
      VpcId: !Ref 'VPCbyASUX'
      InternetGatewayId: !Ref 'MyInternetGateway'
  MyPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
    - MyVPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPCbyASUX'
  MyPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'MyPublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'MyInternetGateway'
  MyPublicSubnetRouteTableAssociationAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: doesExistSubnet1
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ1'
      RouteTableId: !Ref 'MyPublicRouteTable'
  MyPublicSubnetRouteTableAssociationAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: doesExistSubnet2
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ2'
      RouteTableId: !Ref 'MyPublicRouteTable'
  MyPublicSubnetRouteTableAssociationAZ3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: doesExistSubnet3
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ3'
      RouteTableId: !Ref 'MyPublicRouteTable'
  MyDefaultNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref 'VPCbyASUX'
  MyPublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: doesExistSubnet1
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ1'
      NetworkAclId: !GetAtt
      - VPCbyASUX
      - DefaultNetworkAcl
  MyPublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: doesExistSubnet2
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ2'
      NetworkAclId: !GetAtt
      - VPCbyASUX
      - DefaultNetworkAcl
  MyPublicSubnetNetworkAclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: doesExistSubnet3
    Properties:
      SubnetId: !Ref 'MyPublicSubnetAZ3'
      NetworkAclId: !GetAtt
      - VPCbyASUX
      - DefaultNetworkAcl
  InboundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'MyDefaultNetworkAcl'
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
Outputs:
  VPCID:
    Description: VPC ID
    Value: !Ref 'VPCbyASUX'
    Export:
      Name: !Sub '${MyStackNamePrefix}-VPCID'
  DefaultAZ:
    Description: Default Availability Zone AZ ID
    Value: !GetAtt
    - MyPublicSubnetAZ1
    - AvailabilityZone
    Export:
      Name: !Sub '${MyStackNamePrefix}-AZ-ID'
  DefaultPublicSubnet1:
    Description: The subnet no.1's ID to use for public web servers
    Value: !Ref 'MyPublicSubnetAZ1'
    Condition: doesExistSubnet1
    Export:
      Name: !Sub '${MyStackNamePrefix}-Subnet-1-ID'
  DefaultPublicSubnet2:
    Description: The subnet no.2's ID to use for public web servers
    Value: !Ref 'MyPublicSubnetAZ2'
    Condition: doesExistSubnet2
    Export:
      Name: !Sub '${MyStackNamePrefix}-Subnet-2-ID'
  DefaultPublicSubnet3:
    Description: The subnet no.3's ID to use for public web servers
    Value: !Ref 'MyPublicSubnetAZ3'
    Condition: doesExistSubnet3
    Export:
      Name: !Sub '${MyStackNamePrefix}-Subnet-3-ID'
